import ArgumentParser
import Foundation
import SyntaxKit
import SwiftSyntax

@main
struct Syntaxer: AsyncParsableCommand {
    static let configuration = CommandConfiguration(
        commandName: "syntaxer",
        abstract: "Generate Swift code from SyntaxKit DSL - CLI and web-based code generator",
        version: "1.0.0"
    )
    
    @Argument(help: "Path to the Swift file containing DSL code")
    var inputFile: String
    
    @Option(name: .shortAndLong, help: "Output file path (defaults to stdout)")
    var output: String?
    
    func run() async throws {
        let fileURL = URL(fileURLWithPath: inputFile)
        
        guard FileManager.default.fileExists(atPath: fileURL.path) else {
            throw ValidationError("Input file does not exist: \(inputFile)")
        }
        
        let dslCode = try String(contentsOf: fileURL, encoding: .utf8)
        
        // Create a more sophisticated approach using the SyntaxKit library directly
        // We'll need to dynamically evaluate the DSL code
        let generatedCode = try await generateCode(from: dslCode)
        
        // Output the generated code
        if let outputPath = output {
            try generatedCode.write(toFile: outputPath, atomically: true, encoding: .utf8)
            print("Generated Swift code written to: \(outputPath)")
        } else {
            print(generatedCode)
        }
    }
    
    private func generateCode(from dslCode: String) async throws -> String {
        // Create a subprocess to execute the DSL code
        let tempDir = FileManager.default.temporaryDirectory
        let packageDir = tempDir.appendingPathComponent("syntaxkit_eval_\(UUID().uuidString)")
        
        try FileManager.default.createDirectory(at: packageDir, withIntermediateDirectories: true)
        
        // Create a minimal Swift package to execute the DSL
        let packageManifest = """
        // swift-tools-version: 6.2
        import PackageDescription
        
        let package = Package(
            name: "SyntaxKitEval",
            platforms: [.macOS(.v13)],
            dependencies: [
                .package(url: "https://github.com/brightdigit/SyntaxKit.git", from: "0.0.1")
            ],
            targets: [
                .executableTarget(
                    name: "SyntaxKitEval",
                    dependencies: [
                        .product(name: "SyntaxKit", package: "SyntaxKit")
                    ]
                )
            ]
        )
        """
        
        let mainSwift = """
        import SyntaxKit
        import SwiftSyntax
        
        @main  
        struct SyntaxKitEval {
            static func main() {
                // Wrap the DSL code in a Group
                let code = Group {
                    \(dslCode)
                }
                
                // The SyntaxKit library creates DSL objects that need to be
                // converted to SwiftSyntax nodes. For this demonstration,
                // we'll output a simple representation:
                
                print("// Generated by Syntaxer using SyntaxKit")
                print(code)
            }
        }
        """
        
        // Write package files
        try packageManifest.write(
            to: packageDir.appendingPathComponent("Package.swift"),
            atomically: true,
            encoding: .utf8
        )
        
        let sourcesDir = packageDir.appendingPathComponent("Sources/SyntaxKitEval")
        try FileManager.default.createDirectory(at: sourcesDir, withIntermediateDirectories: true)
        
        try mainSwift.write(
            to: sourcesDir.appendingPathComponent("main.swift"),
            atomically: true,
            encoding: .utf8
        )
        
        // Build and run the package
        let buildProcess = Process()
        buildProcess.currentDirectoryURL = packageDir
        buildProcess.executableURL = URL(fileURLWithPath: "/usr/bin/swift")
        buildProcess.arguments = ["build"]
        
        try buildProcess.run()
        buildProcess.waitUntilExit()
        
        guard buildProcess.terminationStatus == 0 else {
            throw ValidationError("Failed to build evaluation package")
        }
        
        // Run the executable
        let runProcess = Process()
        runProcess.currentDirectoryURL = packageDir
        runProcess.executableURL = URL(fileURLWithPath: "/usr/bin/swift")
        runProcess.arguments = ["run", "SyntaxKitEval"]
        
        let pipe = Pipe()
        runProcess.standardOutput = pipe
        runProcess.standardError = pipe
        
        try runProcess.run()
        runProcess.waitUntilExit()
        
        // Clean up
        try? FileManager.default.removeItem(at: packageDir)
        
        let data = pipe.fileHandleForReading.readDataToEndOfFile()
        guard let output = String(data: data, encoding: .utf8) else {
            throw ValidationError("Failed to generate code")
        }
        
        guard runProcess.terminationStatus == 0 else {
            throw ValidationError("Failed to execute DSL code: \(output)")
        }
        
        return output.trimmingCharacters(in: .whitespacesAndNewlines)
    }
}

extension Syntaxer {
    struct ValidationError: Error, CustomStringConvertible {
        let description: String
        
        init(_ description: String) {
            self.description = description
        }
    }
}